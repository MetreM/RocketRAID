diff -pur rr232x-linux-src-v1.10/osm/linux/os_linux.c rr232x-patched/osm/linux/os_linux.c
--- rr232x-linux-src-v1.10/osm/linux/os_linux.c	2019-03-30 12:22:01.959015819 +0100
+++ rr232x-patched/osm/linux/os_linux.c	2019-02-26 18:13:25.000000000 +0100
@@ -284,7 +284,7 @@ void refresh_sd_flags(PVBUS_EXT vbus_ext
   block: remove ->driverfs_dev
   See https://lkml.org/lkml/2016/2/25/662 for hints on how to handle this change.
 */
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(4,8,0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4,4,0)  /*MiSt -- in OpenSuSE Leap this change has been backported to kernel version 4.4 (through a patch named ‘0144-block-remove-driverfs_dev.patch’, dated 2016-06-15) */
 						    struct device *gendisk_dev = disk_to_dev(cur_gendisk)->parent;
 #else
 						    struct device *gendisk_dev = cur_gendisk->driverfs_dev;
@@ -323,7 +323,7 @@ void refresh_sd_flags(PVBUS_EXT vbus_ext
 							blkdev_put(bdev __BDEV_RAW);
 #endif
 							goto next;
-                                                    }
+						    }
 						}
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,28)
 						blkdev_put(bdev, FMODE_READ);
@@ -580,7 +583,7 @@ void  os_request_timer(void * osext, HPT
 
 	del_timer(&vbus_ext->timer);
 	vbus_ext->timer.function = os_timer_for_ldm;
-#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 15, 0)
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 15, 0)  /*MiSt: commit 686fef928bba6be13cabe639f154af7d72b63120 */
 	vbus_ext->timer.data = (unsigned long)vbus_ext;
 #endif
 	vbus_ext->timer.expires = jiffies + 1 + interval / (1000000/HZ);
diff -pur rr232x-linux-src-v1.10/osm/linux/osm_linux.c rr232x-patched/osm/linux/osm_linux.c
--- rr232x-linux-src-v1.10/osm/linux/osm_linux.c	2019-03-30 12:22:01.961015832 +0100
+++ rr232x-patched/osm/linux/osm_linux.c	2019-03-02 20:34:01.000000000 +0100
@@ -272,6 +319,8 @@ static void ldm_initialize_vbus_done(voi
 	up(&((PVBUS_EXT)osext)->sem);
 }
 
+struct Scsi_Host *scsi_register_legacy(/*Scsi_Host_Template*/void *scsi_host_template, int privsize);
+
 static int hpt_detect (Scsi_Host_Template *tpnt)
 {
 	struct pci_dev *pcidev;
@@ -364,7 +413,7 @@ static int hpt_detect (Scsi_Host_Templat
 	/* register scsi hosts */
 	ldm_for_each_vbus(vbus, vbus_ext) {
 
-		host = scsi_register(tpnt, sizeof(void *));
+		host = scsi_register_legacy(tpnt, sizeof(void *));
 		if (!host) {
 			os_printk("scsi_register failed");
 			continue;
@@ -1658,6 +1685,8 @@ static int hpt_halt(struct notifier_bloc
 	return NOTIFY_OK;
 }
 
+void scsi_unregister_legacy(/*struct Scsi_Host*/void *scsi_host);
+
 static int hpt_release (struct Scsi_Host *host)
 {
 	PVBUS_EXT vbus_ext = get_vbus_ext(host);
@@ -1667,7 +1696,7 @@ static int hpt_release (struct Scsi_Host
 	if (!ldm_get_next_vbus(0, 0))
 		unregister_reboot_notifier(&hpt_notifier);
 
-	scsi_unregister(host);
+	scsi_unregister_legacy(host);
 	return 0;
 }
 
@@ -2139,13 +2145,120 @@ static int hpt_scsi_ioctl(Scsi_Device *
 	return -EINVAL;
 }
 
-/*
+/*MiSt: in order to not to have to modify too much code, this re-adds a
+        ‘legacy_hosts’ list to a local extension of the ‘scsi_host_template’: */
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4,17,0)
+#define RR_STATIC_ASSERT(n, c)                     \
+		enum { RR_static_##n = 1 / (int)(!!(c)) }; \
+
+
+ /*
  * Host template
+ * osm/linux/osm_linux.h
+ * 70:typedef struct scsi_host_template Scsi_Host_Template;
  */
+struct scsi_host_template_legacy {
+        struct scsi_host_template rr_driver;
+
+        /*
+         * List of hosts per template.
+         *
+         * This is only for use by scsi_module.c for legacy templates.
+         * For these access to it is synchronized implicitly by
+         * module_init/module_exit.
+         */
+        struct list_head legacy_hosts;
+};
+
+/* "struct module *module; must be the first member of struct scsi_host_template_legacy" */
+RR_STATIC_ASSERT(check1, offsetof(struct scsi_host_template_legacy, rr_driver.module) == 0);
+
+/* "randomly chosen field int this_id; must be at the same offset as in struct scsi_host_template" */
+RR_STATIC_ASSERT(check2, offsetof(struct scsi_host_template_legacy, rr_driver.this_id) == offsetof(struct scsi_host_template, this_id));
+
+/* "struct module *module; must be the first member of struct scsi_host_template_legacy" */
+RR_STATIC_ASSERT(check3, offsetof(struct scsi_host_template_legacy, legacy_hosts) == sizeof(struct scsi_host_template));
+
+#define Scsi_Host_Template struct scsi_host_template_legacy
+
+
+/*MiSt: in this extension to ‘struct Scsi_Host’, we just store ‘sht_legacy_list’
+        as private data in the structures ‘hostdata’ member: */
+struct Scsi_Host_Legacy {
+        struct Scsi_Host scsi_host;
+
+        /* host = scsi_register(tpnt, sizeof(void *));
+         *
+         * See osm/linux/osm_linux.h:
+         * #define get_vbus_ext(host) (*(PVBUS_EXT *)host->hostdata)
+         */
+        PVBUS_EXT vbus_ext;
+
+        /*
+         * List of hosts per template.
+         *
+         * This is only for use by scsi_module.c for legacy templates.
+         * For these access to it is synchronized implicitly by
+         * module_init/module_exit.
+         */
+        struct list_head sht_legacy_list;
+};
+
+/* "struct list_head __devices; must be the first member of struct Scsi_Host_Legacy" */
+RR_STATIC_ASSERT(check4, offsetof(struct Scsi_Host_Legacy, scsi_host.__devices) == 0);
+
+/* "void *vbus_ext; must be the first private data member of Scsi_Host.hostdata" */
+RR_STATIC_ASSERT(check5, offsetof(struct Scsi_Host_Legacy, vbus_ext) == offsetof(struct Scsi_Host, hostdata));
+
+/* "struct list_head sht_legacy_list; must be the second private data member of Scsi_Host.hostdata" */
+RR_STATIC_ASSERT(check6, offsetof(struct Scsi_Host_Legacy, sht_legacy_list) == (offsetof(struct Scsi_Host, hostdata) + sizeof(VBUS_EXT *)));
+
+
+#define get_legacy_vbus_ext(host) (*(PVBUS_EXT *)host->scsi_host.hostdata)
+#else
+#define get_legacy_vbus_ext(host) get_vbus_ext(host)
+#endif
+
 static Scsi_Host_Template driver_template = {
+    #if LINUX_VERSION_CODE >= KERNEL_VERSION(4,17,0)
+    .rr_driver = {
+    #endif
 	name:                    driver_name,
+
+	/*MiSt: Linux kernel v4.17 removes the older driver initialization model.
+        This is explained in ‘scsi_mid_low_api.txt’:
+
+	„The newer model allows HBAs to be hot plugged (and unplugged)
+	during the lifetime of the LLD and will be referred to as the
+	"hotplug" initialization model. The newer model is preferred as it
+	can handle both traditional SCSI equipment that is permanently
+	connected as well as modern "SCSI" devices (e.g. USB or IEEE 1394
+	connected digital cameras) that are hotplugged.“
+
+	As suggested, we now call hpt_detect() at the end of ‘int init_this_scsi_driver(void);’
+	*/
+	#if LINUX_VERSION_CODE < KERNEL_VERSION(4,17,0)
 	detect:                  hpt_detect,
 	release:                 hpt_release,
+	#else
+	/* See ‘include/scsi/scsi_host.h’: */
+	#if 0
+	/*
+	 * Used to initialize old-style drivers.  For new-style drivers
+	 * just perform all work in your module initialization function.
+	 *
+	 * Status:  OBSOLETE
+	 */
+	int (* detect)(struct scsi_host_template *);
+
+	/*
+	 * Used as unload callback for hosts with old-style drivers.
+	 *
+	 * Status: OBSOLETE
+	 */
+	int (* release)(struct Scsi_Host *);
+	#endif
+	#endif
 	queuecommand:            hpt_queuecommand,
 	eh_device_reset_handler: hpt_reset,
 	eh_bus_reset_handler:    hpt_reset,
@@ -2178,8 +2291,50 @@ static Scsi_Host_Template driver_templat
 	max_sectors:             128,
 #endif
 	this_id:                 -1
+
+    #if LINUX_VERSION_CODE >= KERNEL_VERSION(4,17,0)
+    },
+
+    .legacy_hosts = NULL
+    #endif
 };
 
+struct Scsi_Host *scsi_register_legacy(/*Scsi_Host_Template*/void *scsi_host_template, int privsize)
+{
+	Scsi_Host_Template *sht = (Scsi_Host_Template *)scsi_host_template;
+
+	/*MiSt: Linux kernel v4.17 removes the older driver initialization model */
+	#if LINUX_VERSION_CODE < KERNEL_VERSION(4,17,0)
+	struct Scsi_Host *shost = scsi_host_alloc(
+			(struct scsi_host_template *)sht, privsize);
+
+	if (!sht->detect) {
+		printk(KERN_WARNING "scsi_register() called on new-style "
+				    "template for driver %s\n", sht->name);
+		dump_stack();
+	}
+	#else
+	struct Scsi_Host_Legacy *shost = (struct Scsi_Host_Legacy *)scsi_host_alloc(
+			(struct scsi_host_template *)sht, privsize + sizeof(struct list_head)); /* + FIELD_SIZEOF(struct Scsi_Host_Legacy, sht_legacy_list) */
+	#endif
+
+	if (shost)
+		list_add_tail(&shost->sht_legacy_list, &sht->legacy_hosts);
+	return (struct Scsi_Host *)shost;
+}
+
+void scsi_unregister_legacy(/*struct Scsi_Host*/void *scsi_host)
+{
+	#if LINUX_VERSION_CODE < KERNEL_VERSION(4,17,0)
+	struct Scsi_Host *shost = (struct Scsi_Host *)scsi_host;
+	#else
+	struct Scsi_Host_Legacy *shost = (struct Scsi_Host_Legacy *)scsi_host;
+	#endif
+
+	list_del(&shost->sht_legacy_list);
+	scsi_host_put((struct Scsi_Host *)shost);
+}
+
 #if LINUX_VERSION_CODE < KERNEL_VERSION(2,5,0)
 
 #include "scsi_module.c"
@@ -2190,11 +2345,18 @@ EXPORT_NO_SYMBOLS;
 /* scsi_module.c is deprecated in kernel 2.6 */
 static int __init init_this_scsi_driver(void)
 {
+	#if LINUX_VERSION_CODE < KERNEL_VERSION(4,17,0)
 	struct scsi_host_template *sht = &driver_template;
 	struct Scsi_Host *shost;
+	#else
+	Scsi_Host_Template *sht = (Scsi_Host_Template *)&driver_template;
+	struct Scsi_Host_Legacy *shost;
+	#endif
 	struct list_head *l;
 	int error;
 
+	/*MiSt -- kernel v4.17+: the ‘release’ function pointer has been removed */
+	#if LINUX_VERSION_CODE < KERNEL_VERSION(4,17,0)
 	if (!sht->release) {
 		printk(KERN_ERR
 			"scsi HBA driver %s didn't set a release method.\n",
@@ -2203,44 +2365,61 @@ static int __init init_this_scsi_driver(
 	}
 
 	sht->module = THIS_MODULE;
+	#else
+	sht->rr_driver.module = THIS_MODULE;
+	#endif
+
 	INIT_LIST_HEAD(&sht->legacy_hosts);
 
-	sht->detect(sht);
+	hpt_detect((struct scsi_host_template *)sht);  /*LINUX_VERSION_CODE < KERNEL_VERSION(4,17,0): sht->detect(sht);*/
 	if (list_empty(&sht->legacy_hosts))
 		return -ENODEV;
 
 	list_for_each_entry(shost, &sht->legacy_hosts, sht_legacy_list) {
-		error = scsi_add_host(shost, &get_vbus_ext(shost)->hba_list->pcidev->dev);
+		error = scsi_add_host((struct Scsi_Host *)shost, &get_legacy_vbus_ext(shost)->hba_list->pcidev->dev);
 		if (error)
 			goto fail;
-		scsi_scan_host(shost);
+		scsi_scan_host((struct Scsi_Host *)shost);
 	}
 	return 0;
  fail:
 	l = &shost->sht_legacy_list;
 	while ((l = l->prev) != &sht->legacy_hosts)
+		#if LINUX_VERSION_CODE < KERNEL_VERSION(4,17,0)
 		scsi_remove_host(list_entry(l, struct Scsi_Host, sht_legacy_list));
+		#else
+		scsi_remove_host((struct Scsi_Host *)list_entry(l, struct Scsi_Host_Legacy, sht_legacy_list));
+		#endif
 	return error;
 }
 
 static void __exit exit_this_scsi_driver(void)
 {
+	#if LINUX_VERSION_CODE < KERNEL_VERSION(4,17,0)
 	struct scsi_host_template *sht = &driver_template;
 	struct Scsi_Host *shost, *s;
+	#else
+	Scsi_Host_Template *sht = (Scsi_Host_Template *)&driver_template;
+	struct Scsi_Host_Legacy *shost, *s;
+	#endif
 
 	list_for_each_entry(shost, &sht->legacy_hosts, sht_legacy_list)
-		scsi_remove_host(shost);
+		scsi_remove_host((struct Scsi_Host *)shost);
 	list_for_each_entry_safe(shost, s, &sht->legacy_hosts, sht_legacy_list)
-		sht->release(shost);
+		hpt_release((struct Scsi_Host *)shost); /*LINUX_VERSION_CODE < KERNEL_VERSION(4,17,0): sht->release(shost);*/
 
 	if (list_empty(&sht->legacy_hosts))
 		return;
 
+	#if LINUX_VERSION_CODE < KERNEL_VERSION(4,17,0)
 	printk(KERN_WARNING "%s did not call scsi_unregister\n", sht->name);
+	#else
+	printk(KERN_WARNING "%s did not call scsi_unregister\n", sht->rr_driver.name);
+	#endif
 	dump_stack();
 
 	list_for_each_entry_safe(shost, s, &sht->legacy_hosts, sht_legacy_list)
-		scsi_unregister(shost);
+		scsi_unregister_legacy(shost);
 }
 
 module_init(init_this_scsi_driver);

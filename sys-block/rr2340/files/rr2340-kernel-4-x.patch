diff -ruN inc/linux/Makefile.def inc/linux/Makefile.def
--- inc/linux/Makefile.def	2009-07-16 03:28:28.000000000 +0200
+++ inc/linux/Makefile.def	2016-08-05 10:32:08.498268407 +0200
@@ -33,7 +33,7 @@
 endif
 
 # This is only for patch script to make the Makefile include the proper defined C_DEFINES.
-# In patching mode, we can not add -DMODVERSIONS -DMODULES, or will make confusion while 
+# In patching mode, we can not add -DMODVERSIONS -DMODULES, or will make confusion while
 # the user compiles our driver into the kernel image. Also we should determine the ARCH
 # while compile the kernel module and add proper EXTRA_CFLAGS.
 C_DEFINE := $(C_DEFINES)
@@ -50,7 +50,8 @@
 C_OPTS := -O2 -pipe \
 		-Wunused -Wparentheses -Wuninitialized -Wchar-subscripts \
 		-Wtrigraphs -Wswitch -Wreturn-type -Wimplicit \
-		-Wstrict-prototypes -fomit-frame-pointer
+		-Wstrict-prototypes -fomit-frame-pointer \
+		-Wno-date-time
 
 ifeq ($(ARCH), x86_64)
 C_OPTS += -mcmodel=kernel -mno-red-zone
@@ -74,19 +75,26 @@
 KERNELDIR := /lib/modules/$(shell uname -r)/build
 endif
 
-KERNEL_VER := 2.$(shell expr `grep LINUX_VERSION_CODE $(KERNELDIR)/include/linux/version.h | cut -d\  -f3` / 256 % 256)
+#KERNEL_VER := 2.$(shell expr `grep LINUX_VERSION_CODE $(KERNELDIR)/include/linux/version.h | cut -d\  -f3` / 256 % 256)
+KERNEL_MAJOR := $(shell uname -r | cut -d. -f1)
+KERNEL_MINOR := $(shell uname -r | cut -d. -f2)
+KERNEL_VER := $(KERNEL_MAJOR).$(KERNEL_MINOR)
 
 ifeq ($(KERNEL_VER),)
 $(error Cannot find kernel version. Check $(KERNELDIR)/include/linux/version.h.)
 endif
 
+ifneq ($(KERNEL_MAJOR), 4)
+ifneq ($(KERNEL_MAJOR), 3)
 ifneq ($(KERNEL_VER), 2.6)
 ifneq ($(KERNEL_VER), 2.4)
-$(error Only kernel 2.4/2.6 is supported but you use $(KERNEL_VER))
+$(error Only kernel 2.4/2.6/3.x/4.x is supported but you use $(KERNEL_VER))
+endif
+endif
 endif
 endif
 
-ifeq ($(KERNEL_VER), 2.6)
+ifneq ($(KERNEL_VER), 2.4)
 
 TARGET := $(TARGETNAME).ko
 
diff -ruN osm/linux/hptinfo.c osm/linux/hptinfo.c
--- osm/linux/hptinfo.c	2009-07-16 03:28:28.000000000 +0200
+++ osm/linux/hptinfo.c	2016-05-29 14:41:32.000000000 +0200
@@ -8,6 +8,10 @@
 #include "osm_linux.h"
 #include "hptintf.h"
 
+/*MiSt -- v3.10 API change // commit 0ffddfbb834557b8babc7f050b83d11dbcbb1008
+  scsi: saner replacements for ->proc_info()
+*/
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3,10,0)
 typedef struct _hpt_GET_INFO {
 	char *buffer;
 	int buflength;
@@ -52,6 +56,10 @@
 	hpt_copy_mem_info(pinfo, buf, len);
 	return len;
 }
+#else // >= KERNEL_VERSION(3,10,0)
+typedef struct seq_file HPT_GET_INFO;
+#define hpt_copy_info seq_printf
+#endif
 
 #define HPT_DO_IOCTL(code, inbuf, insize, outbuf, outsize) ({\
 	IOCTL_ARG arg;\
@@ -181,7 +189,7 @@
 					devinfo.u.device.ControllerId+1,
 					devinfo.u.device.PathId+1,
 					devinfo.u.device.TargetId+1,
-					devinfo.u.device.IdentifyData.ModelNumber
+					(char*)devinfo.u.device.IdentifyData.ModelNumber  /*MiSt: Typecast necessary?*/
 				);
 		else {
 			memcpy(sn, devinfo.u.device.IdentifyData.SerialNumber,
@@ -193,7 +201,7 @@
 				(devinfo.u.device.Flags & DEVICE_FLAG_IN_ENCLOSURE) ? "E" : "",
 				devinfo.u.device.PathId+1,
 				devinfo.u.device.TargetId+1,
-				devinfo.u.device.IdentifyData.ModelNumber, sn,
+				(char*)devinfo.u.device.IdentifyData.ModelNumber, sn,  /*MiSt: Typecast necessary?*/
 				(int)(devinfo.Capacity*512/1000000),
 				(devinfo.u.device.Flags & DEVICE_FLAG_DISABLED)? "Disabled" : "Normal",
 				devinfo.u.device.ReadAheadEnabled? "[RA]":"",
@@ -233,15 +241,25 @@
 }
 
 #define MAX_PHYSICAL_DEVICE	128
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3,10,0)  /*MiSt: commit 0ffddfbb834557b8babc7f050b83d11dbcbb1008 */
 int hpt_proc_get_info(struct Scsi_Host *host, char *buffer, char **start, off_t offset, int length)
+#else
+int hpt_proc_show_info(struct seq_file *m, struct Scsi_Host *host)
+#endif
 {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3,10,0)  /*MiSt: commit 0ffddfbb834557b8babc7f050b83d11dbcbb1008 */
 	HPT_GET_INFO info;
+#else
+	#define info (*m)
+	#define buffillen count ? 0 : 0
+#endif
 	int i, j, count;
 	CONTROLLER_INFO_V2 conInfo2;
 	DEVICEID *ids;
 	int devs;	
 	PVBUS_EXT vbus_ext = get_vbus_ext(host);
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3,10,0)  /*MiSt: commit 0ffddfbb834557b8babc7f050b83d11dbcbb1008 */
 	info.buffer     = buffer;
 	info.buflength  = length;
 	info.bufoffset  = offset;
@@ -249,16 +267,17 @@
 	info.buffillen  = 0;
 
 	if (start) *start = buffer;
+#endif
 
 	hpt_copy_info(&info, "%s %s\n\n", driver_name_long, driver_ver);
 
 	count = hpt_get_controller_count();
 
 	if (!(count>0) || !(ids = kmalloc(MAX_PHYSICAL_DEVICE * sizeof(DEVICEID), GFP_KERNEL)))
-		return info.buffillen;
+		return info.buffillen;  /*MiSt: return (*m).count ? 0 : 0 */
 
 	if ((devs = hpt_get_physical_devices(ids, MAX_PHYSICAL_DEVICE))<0)
-		return info.buffillen;
+		return info.buffillen;  /*MiSt: return (*m).count ? 0 : 0 */
 	
 	for (j=0; j<count; j++) {
 		int found;
@@ -307,7 +326,7 @@
 
 	kfree(ids);
 
-	return info.buffillen;
+	return info.buffillen;  /*MiSt: return (*m).count ? 0 : 0 */
 }
 
 /* not belong to this file logically, but we want to use ioctl interface */
diff -ruN osm/linux/install.sh osm/linux/install.sh
--- osm/linux/install.sh	2009-07-16 03:28:28.000000000 +0200
+++ osm/linux/install.sh	2016-05-29 14:43:13.000000000 +0200
@@ -3,6 +3,8 @@
 if test "${KERNEL_VER-set}" = set; then echo "KERNEL_VER is not set"; exit 1; fi
 if test "${TARGETNAME-set}" = set; then echo "TARGETNAME is not set"; exit 1; fi
 
+echo "Detected kernel version: ${KERNEL_VER}"
+
 PWD=`pwd`
 
 case ${KERNEL_VER} in
@@ -10,7 +12,7 @@
 	OBJ=o
 	MODVER=`modinfo -f%{kernel_version} ${PWD}/${TARGETNAME}.${OBJ}`
 	;;
-	2.6 )
+	2.6 | 3.* | 4.* )  #MiSt: tested for Linux 4.4.0-22
 	OBJ=ko
 	MODVER=`modinfo -F vermagic ${PWD}/${TARGETNAME}.${OBJ} | cut -d' ' -f1`
 	;;
diff -ruN osm/linux/os_linux.c osm/linux/os_linux.c
--- osm/linux/os_linux.c	2009-07-16 03:28:28.000000000 +0200
+++ osm/linux/os_linux.c	2017-01-08 12:30:52.431764964 +0100
@@ -13,7 +13,7 @@
 void  os_outb (void *port, HPT_U8 value) { outb(value, (unsigned)(HPT_UPTR)port); }
 void  os_outw (void *port, HPT_U16 value) { outw(value, (unsigned)(HPT_UPTR)port); }
 void  os_outl (void *port, HPT_U32 value) { outl(value, (unsigned)(HPT_UPTR)port); }
-void  os_insw (void *port, HPT_U16 *buffer, HPT_U32 count) 
+void  os_insw (void *port, HPT_U16 *buffer, HPT_U32 count)
 { insw((unsigned)(HPT_UPTR)port, (void *)buffer, count); }
 void  os_outsw(void *port, HPT_U16 *buffer, HPT_U32 count)
 { outsw((unsigned)(HPT_UPTR)port, (void *)buffer, count); }
@@ -27,7 +27,7 @@
 
 /* PCI configuration space */
 HPT_U8 os_pci_readb (void *osext, HPT_U8 offset)
-{ 
+{
 	HPT_U8 value;
 
 	if (pci_read_config_byte(((PHBA)osext)->pcidev, offset, &value))
@@ -36,8 +36,8 @@
 		return value;
 }
 
-HPT_U16 os_pci_readw (void *osext, HPT_U8 offset) 
-{ 
+HPT_U16 os_pci_readw (void *osext, HPT_U8 offset)
+{
 	HPT_U16 value;
 
 	if (pci_read_config_word(((PHBA)osext)->pcidev, offset, &value))
@@ -46,7 +46,7 @@
 		return value;
 }
 
-HPT_U32 os_pci_readl (void *osext, HPT_U8 offset) 
+HPT_U32 os_pci_readl (void *osext, HPT_U8 offset)
 {
 	HPT_U32 value;
 
@@ -56,7 +56,7 @@
 		return value;
 }
 
-void os_pci_writeb(void *osext, HPT_U8 offset, HPT_U8 value) 
+void os_pci_writeb(void *osext, HPT_U8 offset, HPT_U8 value)
 {
 	pci_write_config_byte(((PHBA)osext)->pcidev, offset, value);
 }
@@ -66,7 +66,7 @@
 	pci_write_config_word(((PHBA)osext)->pcidev, offset, value);
 }
 
-void os_pci_writel(void *osext, HPT_U8 offset, HPT_U32 value) 
+void os_pci_writel(void *osext, HPT_U8 offset, HPT_U32 value)
 {
 	pci_write_config_dword(((PHBA)osext)->pcidev, offset, value);
 }
@@ -84,8 +84,8 @@
 }
 
 void *os_map_pci_bar(
-	void *osext, 
-	int index,   
+	void *osext,
+	int index,
 	HPT_U32 offset,
 	HPT_U32 length
 )
@@ -126,9 +126,9 @@
 	list->size = size;
 	list->head = 0;
 #if DBG
-	list->reserved_count = 
+	list->reserved_count =
 #endif
-	list->count = count;	
+	list->count = count;
 }
 
 void *freelist_get(struct freelist *list)
@@ -167,7 +167,7 @@
 	list->size = size;
 	list->head = 0;
 #if DBG
-	list->reserved_count = 
+	list->reserved_count =
 #endif
 	list->count = count;
 }
@@ -198,7 +198,11 @@
 
 	if (page)
 		return (PageHighMem(page)?
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(3,6,0)  /*MiSt: commit 1ec9c5ddc17aa398f05646abfcbaf315b544e62f */
+				(char *)kmap_atomic(page) :
+#else
 				(char *)kmap_atomic(page, HPT_KMAP_TYPE) :
+#endif
 				(char *)page_address(page))
 			+ (psg->addr.bus & 0xffffffff);
 	else
@@ -208,9 +212,13 @@
 void os_kunmap_sgptr(void *ptr)
 {
 	if ((HPT_UPTR)ptr >= (HPT_UPTR)high_memory)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(3,6,0)  /*MiSt: commit 1ec9c5ddc17aa398f05646abfcbaf315b544e62f */
+		kunmap_atomic(ptr);
+#else
 		kunmap_atomic(ptr, HPT_KMAP_TYPE);
+#endif
 }
-#else 
+#else
 void *os_kmap_sgptr(PSG psg) { return psg->addr._logical; }
 void os_kunmap_sgptr(void *ptr) {}
 #endif
@@ -232,52 +240,77 @@
 
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,4)
 #define __BDEV_RAW
-#else 
+#else
 #define __BDEV_RAW , BDEV_RAW
 #endif
 
 void refresh_sd_flags(PVBUS_EXT vbus_ext)
 {
-	static int major[] = { SCSI_DISK0_MAJOR, SCSI_DISK1_MAJOR, SCSI_DISK2_MAJOR, SCSI_DISK3_MAJOR, 
-				SCSI_DISK4_MAJOR, SCSI_DISK5_MAJOR, SCSI_DISK6_MAJOR, SCSI_DISK7_MAJOR, 
-				SCSI_DISK8_MAJOR, SCSI_DISK9_MAJOR, SCSI_DISK10_MAJOR, SCSI_DISK11_MAJOR, 
+	static int major[] = { SCSI_DISK0_MAJOR, SCSI_DISK1_MAJOR, SCSI_DISK2_MAJOR, SCSI_DISK3_MAJOR,
+				SCSI_DISK4_MAJOR, SCSI_DISK5_MAJOR, SCSI_DISK6_MAJOR, SCSI_DISK7_MAJOR,
+				SCSI_DISK8_MAJOR, SCSI_DISK9_MAJOR, SCSI_DISK10_MAJOR, SCSI_DISK11_MAJOR,
 				SCSI_DISK12_MAJOR, SCSI_DISK13_MAJOR, SCSI_DISK14_MAJOR, SCSI_DISK15_MAJOR, 0 };
 	int id;
 	Scsi_Device *SDptr;
 
 	vbus_ext->needs_refresh = 0;
-	
+
 	for (id=0; id<osm_max_targets; id++) {
-		
+
 		SDptr = scsi_device_lookup(vbus_ext->host, 0, id, 0);
-		
+
 		vbus_ext->sd_flags[id] &= ~SD_FLAG_IN_USE;
-	
+
 		if (SDptr) {
 			int i, minor;
 			for (i=0; major[i]; i++) {
 				for (minor=0; minor<=240; minor+=16) {
 					struct block_device *bdev = bdget(MKDEV(major[i], minor));
 					if (bdev &&
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,28)
+/*MiSt -- v2.6.37 API change // commit e525fd89d380c4a94c0d63913a1dd1a593ed25e7
+  Added 3rd argument for the active holder, previously this was hardcoded to NULL.
+*/
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,37)
+						blkdev_get(bdev, FMODE_READ, NULL)
+#elif LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,28)
 						blkdev_get(bdev, FMODE_READ)
-#else 
+#else
 						blkdev_get(bdev, FMODE_READ, 0 __BDEV_RAW)
 #endif
 						==0) {
-						if (bdev->bd_disk && bdev->bd_disk->driverfs_dev==&SDptr->sdev_gendev) {
+						if (bdev->bd_disk) {
+						    struct gendisk *cur_gendisk = bdev->bd_disk;
+/*MiSt -- v4.8.0 API change // commit 52c44d93c26f5a76068c0a8cc83bb8f56f38043d
+  block: remove ->driverfs_dev
+  See https://lkml.org/lkml/2016/2/25/662 for hints on how to handle this change.
+*/
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4,8,0)
+						    struct device *gendisk_dev = disk_to_dev(cur_gendisk)->parent;
+#else
+						    struct device *gendisk_dev = cur_gendisk->driverfs_dev;
+						    /*if (bdev->bd_disk->driverfs_dev==&SDptr->sdev_gendev) {*/
+#endif
+						    if (gendisk_dev==&SDptr->sdev_gendev) {
 							if (vbus_ext->sd_flags[id] & SD_FLAG_REVALIDATE) {
 								if (bdev->bd_disk->fops->revalidate_disk)
 									bdev->bd_disk->fops->revalidate_disk(bdev->bd_disk);
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,15)
+/*MiSt -- v4.7.0 API change // commit 9902af79c01a8e39bb99b922fa3eef6d4ea23d69
+  parallel lookups: actual switch to rwsem
+  See https://lkml.org/lkml/2016/5/1/212 for hints on how to handle this change.
+*/
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4,7,0)
+								inode_lock(bdev->bd_inode);
+#elif LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,15)
 								mutex_lock(&bdev->bd_inode->i_mutex);
-#else 
+#else
 								down(&bdev->bd_inode->i_sem);
 #endif
 								i_size_write(bdev->bd_inode, (loff_t)get_capacity(bdev->bd_disk)<<9);
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,15)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4,7,0)
+								inode_unlock(bdev->bd_inode);
+#elif LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,15)
 								mutex_unlock(&bdev->bd_inode->i_mutex);
-#else 
+#else
 								up(&bdev->bd_inode->i_sem);
 #endif
 								vbus_ext->sd_flags[id] &= ~SD_FLAG_REVALIDATE;
@@ -286,14 +319,15 @@
 								vbus_ext->sd_flags[id] |= SD_FLAG_IN_USE;
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,28)
 							blkdev_put(bdev, FMODE_READ);
-#else 
+#else
 							blkdev_put(bdev __BDEV_RAW);
 #endif
 							goto next;
+                                                    }
 						}
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,28)
 						blkdev_put(bdev, FMODE_READ);
-#else 
+#else
 						blkdev_put(bdev __BDEV_RAW);
 #endif
 					}
@@ -323,7 +357,7 @@
 {
 	struct scsi_device *sdev;
 	struct sd_change_wrapper *change = container_of(work, struct sd_change_wrapper, work);
-	
+
 	if (change->to_register) {
 		void *ptr = (void *)(HPT_UPTR)scsi_add_device(change->host, 0, change->id, 0);
 		if (ptr && IS_ERR(ptr))
@@ -333,7 +367,7 @@
 		sdev = scsi_device_lookup(change->host, 0, change->id, 0);
 		if (sdev != NULL) {
 #if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 23)
-			
+
 			scsi_device_cancel(sdev, 0);
 #endif
 			scsi_remove_device(sdev);
@@ -354,10 +388,10 @@
 		os_printk("sd_change mem alloc failed");
 		return;
 	}
-	
+
 #if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 20)
 	INIT_WORK(&sd_change->work, (void (*)(void *))os_sd_changed, &sd_change->work);
-#else 
+#else
 	INIT_WORK(&sd_change->work, os_sd_changed);
 #endif
 
@@ -401,7 +435,7 @@
 	mm_segment_t oldfs;
 	char cmd[64];
 	int result = -1;
-	
+
 	pde = host->hostt->proc_dir;
 	if (pde) pde = pde->parent;
 	if (pde) pde = pde->subdir;
@@ -424,12 +458,12 @@
 
 void refresh_sd_flags(PVBUS_EXT vbus_ext)
 {
-	static int major[] = { SCSI_DISK0_MAJOR, SCSI_DISK1_MAJOR, SCSI_DISK2_MAJOR, SCSI_DISK3_MAJOR, 
+	static int major[] = { SCSI_DISK0_MAJOR, SCSI_DISK1_MAJOR, SCSI_DISK2_MAJOR, SCSI_DISK3_MAJOR,
 				SCSI_DISK4_MAJOR, SCSI_DISK5_MAJOR, SCSI_DISK6_MAJOR, SCSI_DISK7_MAJOR, 0 };
 	int i, minor;
 
 	vbus_ext->needs_refresh = 0;
-	
+
 	for (i=0; i<osm_max_targets; i++) {
 		if (vbus_ext->sd_flags[i] & SD_FLAG_REMOVE) {
 			vbus_ext->sd_flags[i] &= ~SD_FLAG_REMOVE;
@@ -464,7 +498,7 @@
 {
 	PVBUS_EXT vbus_ext = osext;
 	Scsi_Device *SDptr = vbus_ext->host->host_queue;
-	
+
 	while (SDptr) {
 		if (SDptr->id == id)
 			return SDptr->access_count;
@@ -500,9 +534,9 @@
 void os_schedule_task(void *osext, OSM_TASK *task)
 {
 	PVBUS_EXT vbus_ext = osext;
-	
+
 	HPT_ASSERT(task->next==0);
-	
+
 	if (vbus_ext->tasks==0)
 		vbus_ext->tasks = task;
 	else {
@@ -510,7 +544,7 @@
 		while (t->next) t = t->next;
 		t->next = task;
 	}
-	
+
 	if (vbus_ext->worker.func)
 		tasklet_schedule(&vbus_ext->worker);
 }
@@ -535,7 +569,7 @@
 	PVBUS_EXT vbus_ext = osext;
 
 	HPT_ASSERT(vbus_ext->ext_type==EXT_TYPE_VBUS);
-	
+
 	del_timer(&vbus_ext->timer);
 	vbus_ext->timer.function = os_timer_for_ldm;
 	vbus_ext->timer.data = (unsigned long)vbus_ext;
@@ -577,7 +611,7 @@
 				"=r" (esp) : "0" (THREAD_SIZE - 1));
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,5,0)
 	if (esp - sizeof(struct thread_info) < size) {
-#else 
+#else
 	if (esp - sizeof(struct task_struct) < size) {
 #endif
 		printk("*** %s: stack too small (0x%lx) ***\n", location, esp);
@@ -590,7 +624,7 @@
 #if defined(MODULE)
 #if LINUX_VERSION_CODE >KERNEL_VERSION(2, 5, 0)
 module_param(hpt_dbg_level, uint, 0);
-#else 
+#else
 MODULE_PARM(hpt_dbg_level, "i");
 #endif
 MODULE_PARM_DESC(hpt_dbg_level, "debug level");
diff -ruN osm/linux/osm_linux.c osm/linux/osm_linux.c
--- osm/linux/osm_linux.c	2009-07-16 03:28:28.000000000 +0200
+++ osm/linux/osm_linux.c	2016-05-29 14:47:13.000000000 +0200
@@ -12,7 +12,7 @@
 static int autorebuild = 0;
 #if LINUX_VERSION_CODE > KERNEL_VERSION(2,5,0)
 module_param(autorebuild, int, 0);
-#else 
+#else
 MODULE_PARM(autorebuild, "i");
 #endif
 
@@ -29,7 +29,7 @@
 	PVBUS vbus;
 	PVBUS_EXT vbus_ext;
 	int order,size;
-	
+
 	if (pci_enable_device(pcidev)) {
 		os_printk("failed to enable the pci device");
 		return -1;
@@ -77,7 +77,7 @@
 			hba->pciaddr.function, pcidev->irq);
 
 	if (!ldm_register_adapter(&hba->ldm_adapter)) {
-		for (order=0, size=PAGE_SIZE; size<sizeof(VBUS_EXT) + ldm_get_vbus_size(); order++, size<<=1) ;	
+		for (order=0, size=PAGE_SIZE; size<sizeof(VBUS_EXT) + ldm_get_vbus_size(); order++, size<<=1) ;
 		vbus_ext = (PVBUS_EXT)__get_free_pages(GFP_ATOMIC, order);
 
 		if (!vbus_ext) {
@@ -346,7 +346,7 @@
 
 		spin_lock_irq(&initlock);
 		ldm_set_autorebuild(vbus, autorebuild);
-		spin_unlock_irq(&initlock);		
+		spin_unlock_irq(&initlock);
 	}
 
 	spin_lock_irq_io_request_lock;
@@ -447,9 +447,13 @@
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,23)
 	struct scatterlist *sg;
 	sg = scsi_sglist(cmd);
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(3,6,0)  /*MiSt: commit 1ec9c5ddc17aa398f05646abfcbaf315b544e62f */
+	*pbuf = kmap_atomic(HPT_SG_PAGE(sg)) + sg->offset;
+#else
 	*pbuf = kmap_atomic(HPT_SG_PAGE(sg), HPT_KMAP_TYPE) + sg->offset;
+#endif
 	buflen = sg->length;
-#else 
+#else
 
 	if (cmd->use_sg) {
 		struct scatterlist *sg = (struct scatterlist *) cmd->request_buffer;
@@ -459,7 +463,7 @@
 		if (sg->page)
 			sg->address = kmap_atomic(sg->page, HPT_KMAP_TYPE) + sg->offset;
 		*pbuf = sg->address;
-#else 
+#else
 		*pbuf = sg->address;
 #endif
 		buflen = sg->length;
@@ -477,8 +481,12 @@
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,23)
 	struct scatterlist *sg;
 	sg = scsi_sglist(cmd);
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(3,6,0)  /*MiSt: commit 1ec9c5ddc17aa398f05646abfcbaf315b544e62f */
+	kunmap_atomic((char *)buf - sg->offset);
+#else
 	kunmap_atomic((char *)buf - sg->offset, HPT_KMAP_TYPE);
-#else 
+#endif
+#else
 
 	if (cmd->use_sg) {
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,5,0)
@@ -500,7 +508,7 @@
 #ifdef SAM_STAT_CHECK_CONDITION
 #define  HPT_SAM_STAT_CHECK_CONDITION SAM_STAT_CHECK_CONDITION
 #define  HPT_SAM_STAT_GOOD SAM_STAT_GOOD
-#else 
+#else
 /*deprecated as they are shifted 1 bit right in SAM-3 Status code*/
 #define  HPT_SAM_STAT_CHECK_CONDITION CHECK_CONDITION
 #define  HPT_SAM_STAT_GOOD GOOD
@@ -529,7 +537,7 @@
 	int opcode = cdb[2] & 0x3f;
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,23)
 	int bufflen = scsi_bufflen(SCpnt);
-#else 
+#else
 	int bufflen = SCpnt->request_bufflen;
 #endif
 
@@ -599,10 +607,10 @@
 {
 	Scsi_Cmnd *SCpnt = (Scsi_Cmnd *)pCmd->priv;
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,23)
-	if (HPT_SCP(SCpnt)->mapped) { 
+	if (HPT_SCP(SCpnt)->mapped) {
 		scsi_dma_unmap(SCpnt);
 	}
-#else 
+#else
 
 	if (HPT_SCP(SCpnt)->mapped) {
 		if (SCpnt->use_sg)
@@ -692,7 +700,7 @@
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,23)
 	sgList = scsi_sglist(SCpnt);
 	nseg = scsi_sg_count(SCpnt);
-#else 
+#else
 	sgList = (struct scatterlist *)SCpnt->request_buffer;
 	nseg = SCpnt->use_sg;
 #endif
@@ -725,7 +733,7 @@
 				}
 				pSg[idx].eot = (idx==nseg-1)? 1 : 0;
 			}
-#else 
+#else
 			for (idx = 0; idx < nseg; idx++) {
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,5,0)
 				struct page *page = HPT_SG_PAGE(&sgList[idx]);
@@ -736,7 +744,7 @@
 					os_set_sgptr(&pSg[idx], (HPT_U8 *)sgList[idx].address);
 				else
 					os_set_sgptr(&pSg[idx], (HPT_U8 *)page_address(page) + sgList[idx].offset);
-#else 
+#else
 				os_set_sgptr(&pSg[idx], (HPT_U8 *)sgList[idx].address);
 #endif
 				pSg[idx].size = sgList[idx].length;
@@ -786,7 +794,7 @@
 			if (pSg->size & 1) return 0;
 			pSg->eot = (idx==HPT_SCP(SCpnt)->sgcnt-1)? 1 : 0;
 		}
-#else 
+#else
 		if (SCpnt->use_sg) {
 			BUS_ADDRESS addr, last=0;
 			unsigned int length;
@@ -847,11 +855,11 @@
 static void hpt_scsi_set_sense(Scsi_Cmnd *SCpnt, HPT_U8 sk, HPT_U8 asc, HPT_U8 ascq)
 {
 		SCpnt->result = (DRIVER_SENSE << 24) | HPT_SAM_STAT_CHECK_CONDITION;
-		SCpnt->sense_buffer[0] = 0x70;	
-		SCpnt->sense_buffer[2] = sk; 
-		SCpnt->sense_buffer[7] = 18 - 8;	
-		SCpnt->sense_buffer[12] = asc;	
-		SCpnt->sense_buffer[13] = ascq; 
+		SCpnt->sense_buffer[0] = 0x70;
+		SCpnt->sense_buffer[2] = sk;
+		SCpnt->sense_buffer[7] = 18 - 8;
+		SCpnt->sense_buffer[12] = asc;
+		SCpnt->sense_buffer[13] = ascq;
 		return;
 }
 
@@ -865,7 +873,7 @@
 		if (pCmd->Result == RETURN_SUCCESS) {
 			SCpnt->result = HPT_SAM_STAT_GOOD;
 		} else {
-			hpt_scsi_set_sense(SCpnt, ABORTED_COMMAND, 
+			hpt_scsi_set_sense(SCpnt, ABORTED_COMMAND,
 				0, 0);
 		}
 
@@ -875,7 +883,14 @@
 	}
 }
 
+/*MiSt -- v2.6.37 API change // commit f281233d3eba15fb225d21ae2e228fd4553d824a
+  SCSI host lock push-down
+*/
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,37)  /*#ifdef DEF_SCSI_QCMD*/
+static int hpt_queuecommand_lck (Scsi_Cmnd * SCpnt, void (*done) (Scsi_Cmnd *))
+#else
 static int hpt_queuecommand (Scsi_Cmnd * SCpnt, void (*done) (Scsi_Cmnd *))
+#endif
 {
 	struct Scsi_Host *phost = sc_host(SCpnt);
 	PVBUS_EXT vbus_ext = get_vbus_ext(phost);
@@ -918,9 +933,9 @@
 
 		HPT_ASSERT(pVDev->type == VD_RAW && pVDev->u.raw.legacy_disk);
 
-		
-		
-		
+
+
+
 		if ((SCpnt->cmnd[4] & 0x2) ||
 			((SCpnt->cmnd[4] >> 4) & 0xf) != 0) {
 			hpt_scsi_set_sense(SCpnt, ILLEGAL_REQUEST, 0x24, 0x00);
@@ -928,12 +943,12 @@
 		}
 
 		if (SCpnt->cmnd[4] & 0x1) {/*start power with reset*/
-			
+
 			pVDev->Class->reset(pVDev);
 			SCpnt->result = DID_OK<<16;
 			SCpnt->scsi_done(SCpnt);
 		} else { /*stop, put it into standby mode*/
-			
+
 			pCmd = ldm_alloc_cmds(pVDev->vbus, pVDev->cmds_per_request);
 			if (!pCmd) {
 				HPT_ASSERT(0);
@@ -954,7 +969,7 @@
 	case 0x35: /*SYNCHRONIZE_CACHE_12*/
 	case 0x91: /*SYNCHRONIZE_CACHE_16*/
 	{
-					
+
 		if (mIsArray(pVDev->type) &&
 				pVDev->u.array.transform &&
 				pVDev->u.array.transform->target) {
@@ -980,14 +995,14 @@
 		ldm_queue_cmd(pCmd);
 		return 0;
 	}
-		
+
 	case 0x85: /*ATA_16*/
 	case 0xA1: /*ATA_12*/
 	{
 		HPT_U8 prot;
 		PassthroughCmd *passthru;
-		
-		
+
+
 		if (mIsArray(pVDev->type)) {
 			goto invalid;
 		}
@@ -996,8 +1011,8 @@
 
 		prot = (SCpnt->cmnd[1] & 0x1e) >> 1;
 
-		
-		if (prot < 3 || prot > 5) 
+
+		if (prot < 3 || prot > 5)
 			goto set_sense;
 
 		pCmd = ldm_alloc_cmds(vbus, pVDev->cmds_per_request);
@@ -1046,7 +1061,7 @@
 		}
 
 		if (SCpnt->cmnd[1] & 0xe0) {
-			
+
 
 			if (!(passthru->bCommandReg == ATA_CMD_READ_MULTI ||
 			    passthru->bCommandReg == ATA_CMD_READ_MULTI_EXT ||
@@ -1058,7 +1073,7 @@
 			}
 		}
 
-		
+
 		if (passthru->bFeaturesReg == ATA_SET_FEATURES_XFER &&
 			passthru->bCommandReg == ATA_CMD_SET_FEATURES) {
 			goto error;
@@ -1067,10 +1082,10 @@
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,23)
 		passthru->nSectors = scsi_bufflen(SCpnt) / ATA_SECTOR_SIZE;
 		pCmd->buildsgl = os_buildsgl;
-#else 
-		
+#else
+
 		passthru->nSectors = SCpnt->request_bufflen / ATA_SECTOR_SIZE;
-		
+
 		/*check sg used*/
 		if (SCpnt->use_sg)
 			pCmd->buildsgl = os_buildsgl;
@@ -1081,13 +1096,13 @@
 			default: /*None data*/
 				break;
 			case 4: /*PIO data in, T_DIR=1 match check*/
-				if ((SCpnt->cmnd[2] & 3) && 
+				if ((SCpnt->cmnd[2] & 3) &&
 					(SCpnt->cmnd[2] & 0x8) == 0)
 					goto error;
 				pCmd->flags.data_in = 1;
 				break;
 			case 5: /*PIO data out, T_DIR=0 match check*/
-				if ((SCpnt->cmnd[2] & 3) && 
+				if ((SCpnt->cmnd[2] & 3) &&
 					(SCpnt->cmnd[2] & 0x8))
 					goto error;
 				pCmd->flags.data_out = 1;
@@ -1147,19 +1162,19 @@
 					rbuf[3] = 1;
 					rbuf[4] = 0x20;
 				}
-				SCpnt->result = (DID_OK<<16);				
+				SCpnt->result = (DID_OK<<16);
 				break;
 			}
 			case 0x83:
 				rbuf[0] = 0;
 				rbuf[1] = 0x83;
 				rbuf[2] = 0;
-				rbuf[3] = 12; 
+				rbuf[3] = 12;
 				rbuf[4] = 1;
-				rbuf[5] = 2; 
+				rbuf[5] = 2;
 				rbuf[6] = 0;
-				rbuf[7] = 8; 
-				rbuf[8] = 0; 
+				rbuf[7] = 8;
+				rbuf[8] = 0;
 				rbuf[9] = 0x19;
 				rbuf[10] = 0x3C;
 				rbuf[11] = 0;
@@ -1167,7 +1182,7 @@
 				rbuf[13] = 0;
 				rbuf[14] = 0;
 				rbuf[15] = 0;
-				SCpnt->result = (DID_OK<<16);				
+				SCpnt->result = (DID_OK<<16);
 				break;
 			default:
 				scsi_check_condition(SCpnt, ILLEGAL_REQUEST, 0x24, 0);
@@ -1178,7 +1193,7 @@
 			break;
 		} else if (SCpnt->cmnd[2]) {
 			scsi_check_condition(SCpnt, ILLEGAL_REQUEST, 0x24, 0);
-			scsicmd_buf_put(SCpnt, inquiryData);			
+			scsicmd_buf_put(SCpnt, inquiryData);
 			break;
 		}
 
@@ -1189,23 +1204,23 @@
 		inquiryData->CommandQueue = 1;
 
 		if (buflen > 63) {
-			rbuf = (HPT_U8 *)inquiryData;			
+			rbuf = (HPT_U8 *)inquiryData;
 			rbuf[58] = 0x60;
 			rbuf[59] = 0x3;
-			
-			rbuf[64] = 0x3; 
-			rbuf[66] = 0x3; 
+
+			rbuf[64] = 0x3;
+			rbuf[66] = 0x3;
 			rbuf[67] = 0x20;
-			
+
 		}
-		
+
 		if (pVDev->type == VD_RAW) {
 			pVDev->u.raw.him->get_device_config(pVDev->u.raw.phy_dev,&devconf);
 
 			if ((devconf.pIdentifyData->GeneralConfiguration & 0x80))
 				inquiryData->RemovableMedia = 1;
 
-			
+
 			memcpy(&inquiryData->VendorId, "ATA     ", 8);
 			memcpy(&inquiryData->ProductId, devconf.pIdentifyData->ModelNumber, 16);
 			ldm_ide_fixstring((HPT_U8 *)&inquiryData->ProductId, 16);
@@ -1242,7 +1257,7 @@
 			sector_size_shift = pVDev->u.array.sector_size_shift;
 
 		new_cap = pVDev->capacity >> sector_size_shift;
-		
+
 		if (new_cap > 0xfffffffful)
 			cap = 0xffffffff;
 		else
@@ -1409,6 +1424,11 @@
 	return 0;
 }
 
+/*MiSt: commit f281233d3eba15fb225d21ae2e228fd4553d824a */
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,37)  /*#ifdef DEF_SCSI_QCMD*/
+static DEF_SCSI_QCMD(hpt_queuecommand)
+#endif
+
 static int hpt_reset (Scsi_Cmnd *SCpnt)
 {
 	PVBUS_EXT vbus_ext = get_vbus_ext(sc_host(SCpnt));
@@ -1541,7 +1561,7 @@
 	PHBA hba;
 	unsigned long flags;
 	int i;
-	int order,size;	
+	int order,size;
 
 	/* stop all ctl tasks and disable the worker tasklet */
 	hpt_stop_tasks(vbus_ext);
@@ -1576,7 +1596,7 @@
 		vbus_ext->hba_list = hba->next;
 		kfree(hba);
 	}
-	for (order=0, size=PAGE_SIZE; size<sizeof(VBUS_EXT) + ldm_get_vbus_size(); order++, size<<=1) ;	
+	for (order=0, size=PAGE_SIZE; size<sizeof(VBUS_EXT) + ldm_get_vbus_size(); order++, size<<=1) ;
 	free_pages((unsigned long)vbus_ext, order);
 }
 
@@ -1595,7 +1615,7 @@
 		hpt_stop_tasks(vbus_ext);
 		tasklet_kill(&vbus_ext->worker);
 		vbus_ext->worker.func = 0;
-		
+
 		/* flush devices */
 		for (i=0; i<osm_max_targets; i++) {
 			PVDEV vd = ldm_find_target(vbus, i);
@@ -1790,6 +1810,7 @@
 	return -EINVAL;
 }
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3,10,0)  /*MiSt: commit 0ffddfbb834557b8babc7f050b83d11dbcbb1008 */
 static int hpt_proc_info26(struct Scsi_Host *host, char *buffer, char **start,
 					off_t offset, int length, int inout)
 {
@@ -1799,6 +1820,7 @@
 	else
 		return hpt_proc_get_info(host, buffer, start, offset, length);
 }
+#endif
 
 #if LINUX_VERSION_CODE < KERNEL_VERSION(2,5,0)
 static int hpt_proc_info24(char *buffer,char **start, off_t offset,
@@ -1826,7 +1848,7 @@
 	memset(&ioctl_arg, 0, sizeof(ioctl_arg));
 	memset(&ide_passthrough_header, 0, sizeof(ide_passthrough_header));
 
-	
+
 	if (copy_from_user(&ide_passthrough_header.bFeaturesReg, arg+2, 1) ||
 		copy_from_user(&ide_passthrough_header.bSectorCountReg, arg+3, 1) ||
 		copy_from_user(&ide_passthrough_header.bLbaLowReg, arg+1, 1) ||
@@ -1971,7 +1993,7 @@
 			goto invalid;
 		break;
 	default:
-		
+
 		if (copy_to_user(arg, buff+sizeof(IDE_PASS_THROUGH_HEADER)+7, 1) ||
 			copy_to_user(arg+1, buff+sizeof(IDE_PASS_THROUGH_HEADER)+3, 1) ||
 			copy_to_user(arg+2, buff+sizeof(IDE_PASS_THROUGH_HEADER)+2, 1) )
@@ -2003,7 +2025,7 @@
 
 		memset(&ioctl_arg,0,sizeof(ioctl_arg));
 
-		
+
 		if (copy_from_user(data, arg, 4*sizeof(int))){
 			/* for the return value is used to set diskid */
 			return 0;
@@ -2099,7 +2121,12 @@
 	#endif
 #else /* 2.6.x */
 	proc_name:               driver_name,
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3,10,0)  /*MiSt: commit 0ffddfbb834557b8babc7f050b83d11dbcbb1008 */
 	proc_info:               hpt_proc_info26,
+#else
+	show_info:               hpt_proc_show_info,  /*see osm/linux/osm_linux.h,hptinfo.c*/
+	write_info:              hpt_proc_set_info,   /*see current file, line 1718*/
+#endif
 	max_sectors:             128,
 #endif
 	this_id:                 -1
@@ -2110,7 +2137,7 @@
 #include "scsi_module.c"
 EXPORT_NO_SYMBOLS;
 
-#else 
+#else
 
 /* scsi_module.c is deprecated in kernel 2.6 */
 static int __init init_this_scsi_driver(void)
diff -ruN osm/linux/osm_linux.h osm/linux/osm_linux.h
--- osm/linux/osm_linux.h	2009-07-16 03:28:28.000000000 +0200
+++ osm/linux/osm_linux.h	2016-05-29 13:50:11.000000000 +0200
@@ -8,11 +8,18 @@
 
 /* system headers */
 
+/*MiSt -- v2.6.19 API change // commit d942492e1dbce264435daaf40f5742e1aaa5adaf
+  The file linux/config.h has been removed from 2.6.19 kernel.
+*/
+#include <linux/version.h>
+
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,19)
 #ifndef AUTOCONF_INCLUDED
 #include <linux/config.h>
 #endif
+#endif
 
-#include <linux/version.h>
+/*#include <linux/version.h>*/
 
 #if (LINUX_VERSION_CODE < KERNEL_VERSION(2,5,0)) && defined(MODVERSIONS)
 #include <linux/modversions.h>
@@ -55,7 +62,7 @@
 #if LINUX_VERSION_CODE < KERNEL_VERSION(2,5,0)
 #include "scsi.h"
 #include <scsi/scsi_ioctl.h>
-#else 
+#else
 #include <linux/blkdev.h>
 #include <scsi/scsi_cmnd.h>
 #include <scsi/scsi_device.h>
@@ -69,7 +76,7 @@
 
 #if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,4)
 #include "hosts.h"
-#else 
+#else
 #include <scsi/scsi_host.h>
 #endif
 
@@ -80,7 +87,7 @@
 	u8 DeviceType : 5;
 	u8 RemovableMedia : 1;
 	u8 DeviceTypeModifier : 7;
-#else 
+#else
 	u8 DeviceType : 5;
 	u8 DeviceTypeQualifier : 3;
 	u8 DeviceTypeModifier : 7;
@@ -99,7 +106,7 @@
 	u8 Reserved2 : 1;
 	u8 CommandQueue : 1;
 	u8 SoftReset : 1;
-#else 
+#else
 	u8 SoftReset : 1;
 	u8 CommandQueue : 1;
 	u8 Reserved2 : 1;
@@ -133,7 +140,7 @@
 #define sc_channel(sc) sc->device->channel
 #define sc_target(sc)  sc->device->id
 #define sc_lun(sc)     sc->device->lun
-#else 
+#else
 #define sc_host(sc)    sc->host
 #define sc_channel(sc) sc->channel
 #define sc_target(sc)  sc->target
@@ -147,7 +154,7 @@
 #define IRQ_HANDLED
 #define IRQ_RETVAL(x)
 #endif
-#else 
+#else
 #define SUGGEST_ABORT 0
 #endif
 
@@ -160,7 +167,7 @@
 #define spin_unlock_irq_io_request_lock  spin_unlock_irq(&io_request_lock)
 #define spin_lock_irqsave_io_request_lock(flags)      spin_lock_irqsave (&io_request_lock, flags)
 #define spin_unlock_irqrestore_io_request_lock(flags) spin_unlock_irqrestore (&io_request_lock, flags)
-#else 
+#else
 #define spin_lock_irq_io_request_lock
 #define spin_unlock_irq_io_request_lock
 #define spin_lock_irqsave_io_request_lock(flags)
@@ -169,14 +176,20 @@
 
 #if LINUX_VERSION_CODE < KERNEL_VERSION(2,5,0)
 #define scsi_set_max_cmd_len(host, len)
-#else 
+#else
 #define scsi_set_max_cmd_len(host, len) host->max_cmd_len = len
 #endif
 
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,5,0)
+/*MiSt -- v3.6 API change // commit 1ec9c5ddc17aa398f05646abfcbaf315b544e62f
+  highmem.h: remove the second argument of k[un]map_atomic()
+*/
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(3,6,0)
+#undef HPT_KMAP_TYPE
+#define HPT_FIND_PCI_DEVICE pci_get_device
+#elif LINUX_VERSION_CODE >= KERNEL_VERSION(2,5,0)
 #define HPT_KMAP_TYPE KM_BIO_SRC_IRQ
 #define HPT_FIND_PCI_DEVICE pci_get_device
-#else 
+#else
 #define HPT_KMAP_TYPE KM_BH_IRQ
 #define HPT_FIND_PCI_DEVICE pci_find_device
 #endif
@@ -187,19 +200,19 @@
 
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,11)
 #define hpt_verify_area(type, addr, size) (!access_ok((type), (addr), (size)))
-#else 
+#else
 #define hpt_verify_area(type, addr, size) (verify_area((type), (addr), (size)))
 #endif
 
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,20)
 #define HPT_SA_SHIRQ		IRQF_SHARED
-#else 
+#else
 #define HPT_SA_SHIRQ		SA_SHIRQ
 #endif
 
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,24)
 #define HPT_SG_PAGE(sg)		sg_page(sg)
-#else 
+#else
 #define HPT_SG_PAGE(sg)		(sg)->page
 #endif
 
@@ -239,7 +252,7 @@
 	struct pci_dev *pcidev;
 	struct _vbus_ext *vbus_ext;
 	struct _hba *next;
-	
+
 	/* HIM instance continues */
 	unsigned long him_handle[0] __attribute__((aligned(sizeof(unsigned long))));
 }
@@ -250,25 +263,25 @@
 	PHBA hba_list;
 	struct freelist *freelist_head;
 	struct freelist *freelist_dma_head;
-	
+
 	/*
-	 * all driver entries (except hpt_release/hpt_intr) are protected by 
+	 * all driver entries (except hpt_release/hpt_intr) are protected by
 	 * io_request_lock on kernel 2.4, and by host->host_lock on kernel 2.6.
 	 * so, it's not necessarily to have our own spinlocks; we just need
 	 * to pay attention to our proc/ioctl routines.
 	 */
 	spinlock_t *lock;
 	struct semaphore sem;
-	
+
 	struct Scsi_Host *host;
-	
+
 	struct tasklet_struct worker;
 	OSM_TASK *tasks;
 	struct timer_list timer;
-	
+
 	HPT_U8 *sd_flags;
 	int needs_refresh;
-	
+
 	/* the LDM vbus instance continues */
 	unsigned long vbus[0] __attribute__((aligned(sizeof(unsigned long))));
 }
@@ -280,7 +293,7 @@
 
 #if LINUX_VERSION_CODE < KERNEL_VERSION(2,5,0)
 #define set_vbus_lock(vbus_ext) vbus_ext->lock = &io_request_lock
-#else 
+#else
 #define set_vbus_lock(vbus_ext) vbus_ext->lock = vbus_ext->host->host_lock
 #endif
 
@@ -289,6 +302,12 @@
 void refresh_sd_flags(PVBUS_EXT vbus_ext);
 void hpt_do_ioctl(IOCTL_ARG *ioctl_args);
 void hpt_stop_tasks(PVBUS_EXT vbus_ext);
+/*MiSt -- v2.6.19 API change // commit <TODO>
+  The file linux/config.h has been removed from 2.6.19 kernel.
+*/
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3,10,0)
 int hpt_proc_get_info(struct Scsi_Host *host, char *buffer, char **start, off_t offset, int length);
-
+#else
+int hpt_proc_show_info(struct seq_file *m, struct Scsi_Host *host);
+#endif
 #endif
diff -ruN osm/linux/patch.sh osm/linux/patch.sh
--- osm/linux/patch.sh	2009-07-16 03:28:28.000000000 +0200
+++ osm/linux/patch.sh	2016-05-29 14:43:01.000000000 +0200
@@ -28,11 +28,13 @@
 cd ${HPT_ROOT}/product
 cp ${HPT_ROOT}/product/${PRODUCTNAME}/linux/* ${KERNELDIR}/drivers/scsi/${TARGETNAME}/
 
+echo "Detected kernel version: ${KERNEL_VER}"
+
 case "$KERNEL_VER" in
 	2.4 )
 	cd ${HPT_ROOT}/lib/linux/free-${ARCH}-regparm0
 	ld -r -o ${ARCH}-${TARGETNAME}.obj ${TARGETMODS}
-	mv ${ARCH}-${TARGETNAME}.obj $KERNELDIR/drivers/scsi/${TARGETNAME}/	
+	mv ${ARCH}-${TARGETNAME}.obj $KERNELDIR/drivers/scsi/${TARGETNAME}/
 	cd $KERNELDIR/drivers/scsi/${TARGETNAME}
 	if test ${ARCH} = "i686" ; then
 		mv ${ARCH}-${TARGETNAME}.obj i386-${TARGETNAME}.obj
@@ -143,13 +145,13 @@
 		fi
 	fi
 	;;
-	2.6 )
+	2.6 | 3.* | 4.* )  #MiSt: tested for Linux 4.4.0-22
 	cd ${HPT_ROOT}/lib/linux/free-${ARCH}-regparm0
 	ld -r -o ${ARCH}-${TARGETNAME}.obj ${TARGETMODS}
-	mv ${ARCH}-${TARGETNAME}.obj $KERNELDIR/drivers/scsi/${TARGETNAME}/	
+	mv ${ARCH}-${TARGETNAME}.obj $KERNELDIR/drivers/scsi/${TARGETNAME}/
 	cd ${HPT_ROOT}/lib/linux/free-${ARCH}-regparm3
 	ld -r -o ${ARCH}-${TARGETNAME}-3.obj ${TARGETMODS}
-	mv ${ARCH}-${TARGETNAME}-3.obj $KERNELDIR/drivers/scsi/${TARGETNAME}/	
+	mv ${ARCH}-${TARGETNAME}-3.obj $KERNELDIR/drivers/scsi/${TARGETNAME}/
 	cd $KERNELDIR/drivers/scsi/${TARGETNAME}
 	if test ${ARCH} = "i686" ; then
 		mv ${ARCH}-${TARGETNAME}.obj i386-${TARGETNAME}.obj
diff -ruN product/rr2340/linux/config.c product/rr2340/linux/config.c
--- product/rr2340/linux/config.c	2009-07-16 03:28:28.000000000 +0200
+++ product/rr2340/linux/config.c	2016-05-29 15:58:56.000000000 +0200
@@ -23,7 +23,17 @@
 
 char driver_name[] = "rr2340";
 char driver_name_long[] = "RocketRAID 2340 controller driver";
+
+/*MiSt: gcc 4.9 (and above) warns when the __DATE__ and __TIME__ macros
+        are used: https://gcc.gnu.org/gcc-4.9/changes.html */
+#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 9)
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wdate-time"
+#endif
 char driver_ver[] = "v1.7 (" __DATE__ " " __TIME__ ")";
+#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 9)
+#pragma GCC diagnostic pop
+#endif
 int  osm_max_targets = 32;
 
 int os_max_cache_size = 0x1000000;
